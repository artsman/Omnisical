// The MIT License (MIT)

// Copyright (c) 2014 Arts Management Systems Ltd.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//Omnis includes
#include <extcomp.he>
#include <libical/ical.h>
#include "Constants.he"
#include "OmnisTools.he"

#include "Date.he"
#include <string>

#ifndef ICAL_TOOLS_HE_
#define ICAL_TOOLS_HE_

namespace iCalTools {
    
    // Convert between icaltimetype and EXTfldval
    void getEXTFldValFromTimeType(EXTfldval& fVal, icaltimetype tt, bool asObj = false, OmnisTools::tThreadData* pThreadData = 0);
    icaltimetype getTimeTypeFromEXTFldVal(OmnisTools::tThreadData* pThreadData, EXTfldval& fVal);
    
    // Convert between icalrecurrencetype and EXTfldval
    void getEXTFldValFromRecurrence(EXTfldval& fVal, icalrecurrencetype rt, OmnisTools::tThreadData* pThreadData = 0);
    icalrecurrencetype getRecurrenceFromEXTFldVal(OmnisTools::tThreadData* pThreadData, EXTfldval& fVal);
    
    void getValueForType(OmnisTools::tThreadData* pThreadData, EXTfldval& fVal, icalproperty* prop);
    void setValueForType(OmnisTools::tThreadData* pThreadData, EXTfldval& fVal, icalproperty* prop);
    void getOmnisTypeForType(icalproperty_kind type, ffttype &fft, qshort &fdp, qlong &flen);
    
    void getValueForType(OmnisTools::tThreadData* pThreadData,EXTfldval& fVal, icalparameter* param);
    void setValueForType(OmnisTools::tThreadData* pThreadData,EXTfldval& fVal, icalparameter* param);
    void getOmnisTypeForType(icalparameter_kind type, ffttype &fft, qshort &fdp, qlong &flen);
    
    void getValueForType(OmnisTools::tThreadData* pThreadData, EXTfldval& fVal, icalvalue* val);
    void setValueForType(OmnisTools::tThreadData* pThreadData, EXTfldval& fVal, icalvalue* val);
    void getOmnisTypeForType(icalvalue_kind type, ffttype &fft, qshort &fdp, qlong &flen);
    
    // Generic way to get EXTFldVal for an iCal type
    template<class T>
    void getEXTFldValFromICalType(EXTfldval& fVal, T s, qlong prefixID = kConstResourcePrefix) {
        LibiCalConstants::ConstantLookup<T> lookup;
        
        int constAssign = lookup.getOmnis(s);
        if (constAssign > 0) {
            OmnisTools::getEXTFldValFromConstant(fVal, lookup.constID(constAssign), prefixID);
        }
    }
    
    // Generic way to get an iCalType for an EXTfldval
    template<class T>
    T getICalTypeFromEXTFldVal(EXTfldval& fVal) {
        LibiCalConstants::ConstantLookup<T> lookup;
        int constAssign = OmnisTools::getIntFromEXTFldVal(fVal, lookup.first(), lookup.last());
        return lookup.get(constAssign);
    }
    
    std::string getiCalStringFromEXTFldVal(EXTfldval&);
	void getEXTFldValFromiCalChar(EXTfldval&, const char*);
}
	
#endif // ICAL_TOOLS_HE_
