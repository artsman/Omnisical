// The MIT License (MIT)

// Copyright (c) 2014 Arts Management Systems Ltd.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <libical/ical.h>
#include <extcomp.he>
#include "NVObjBase.he"
#include "OmnisTools.he"

#include <Boost/shared_ptr.hpp>

#ifndef TRIGGER_HE
#define TRIGGER_HE

// Class definition for C++ version of your object
class NVObjTrigger : public NVObjBase
{
public:		
	// Static tracking variable
	static qshort objResourceId;  // This static variable needs to be in all inherited objects
	
	// Constructor / Destructor
	NVObjTrigger( qobjinst objinst, OmnisTools::tThreadData *pThreadData );
	virtual ~NVObjTrigger();
    
    // Copy object
    virtual void copy( NVObjTrigger* pObj );

	// Methods Available and Method Call Handling
	virtual qlong returnMethods( OmnisTools::tThreadData* pThreadData );
	virtual qlong methodCall( OmnisTools::tThreadData* pThreadData );
    
	// Properties and Property Call Handling
	virtual qlong returnProperties( OmnisTools::tThreadData* pThreadData );
	virtual qlong getProperty( OmnisTools::tThreadData* pThreadData );
	virtual qlong setProperty( OmnisTools::tThreadData* pThreadData );
	virtual qlong canAssignProperty( OmnisTools::tThreadData* pThreadData, qlong propID );
	
protected:
private:
    // Custom (Your) Methods
	OmnisTools::tResult methodInitialize( OmnisTools::tThreadData* pThreadData, qshort pParamCount );
};

#endif /* TRIGGER_HE */